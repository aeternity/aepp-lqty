/* tslint:disable */
/* eslint-disable */
/**
 * Aeternity Middleware
 * API for [Aeternity Middleware](https://github.com/aeternity/ae_mdw)
 *
 * The version of the OpenAPI document: 1.51.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Aex141Response,
  Aex9BalanceResponse,
  Auction,
  Block,
  Channel,
  ErrorResponse,
  GetAccountActivities200Response,
  GetAex141ContractTemplates200Response,
  GetAex141OwnedTokens200Response,
  GetAex141TemplateTokens200Response,
  GetAex9ContractAccountBalanceHistory200Response,
  GetAex9ContractBalances200Response,
  GetAex9PairTransfers200Response,
  GetBlockHashOrKbiParameter,
  GetBlocks200Response,
  GetChannels200Response,
  GetContractsCalls200Response,
  GetContractsLogs200Response,
  GetDeltastats200Response,
  GetKeyBlockMicroBlocks200Response,
  GetKeyBlocks200Response,
  GetMicroBlockTransactions200Response,
  GetNamePointees200Response,
  GetNames200Response,
  GetOracles200Response,
  GetSortedAex141Contracts200Response,
  GetSortedAex9Tokens200Response,
  GetTotalstats200Response,
  GetTransfers200Response,
  GetTxCountById200Response,
  KeyBlock,
  MicroBlock,
  Name,
  NameClaim,
  NameTransfer,
  NameUpdate,
  NotFoundResponse,
  Oracle,
  SearchNames200Response,
  Status,
  Tx,
} from '../models';
import {
    Aex141ResponseFromJSON,
    Aex141ResponseToJSON,
    Aex9BalanceResponseFromJSON,
    Aex9BalanceResponseToJSON,
    AuctionFromJSON,
    AuctionToJSON,
    BlockFromJSON,
    BlockToJSON,
    ChannelFromJSON,
    ChannelToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetAccountActivities200ResponseFromJSON,
    GetAccountActivities200ResponseToJSON,
    GetAex141ContractTemplates200ResponseFromJSON,
    GetAex141ContractTemplates200ResponseToJSON,
    GetAex141OwnedTokens200ResponseFromJSON,
    GetAex141OwnedTokens200ResponseToJSON,
    GetAex141TemplateTokens200ResponseFromJSON,
    GetAex141TemplateTokens200ResponseToJSON,
    GetAex9ContractAccountBalanceHistory200ResponseFromJSON,
    GetAex9ContractAccountBalanceHistory200ResponseToJSON,
    GetAex9ContractBalances200ResponseFromJSON,
    GetAex9ContractBalances200ResponseToJSON,
    GetAex9PairTransfers200ResponseFromJSON,
    GetAex9PairTransfers200ResponseToJSON,
    GetBlockHashOrKbiParameterFromJSON,
    GetBlockHashOrKbiParameterToJSON,
    GetBlocks200ResponseFromJSON,
    GetBlocks200ResponseToJSON,
    GetChannels200ResponseFromJSON,
    GetChannels200ResponseToJSON,
    GetContractsCalls200ResponseFromJSON,
    GetContractsCalls200ResponseToJSON,
    GetContractsLogs200ResponseFromJSON,
    GetContractsLogs200ResponseToJSON,
    GetDeltastats200ResponseFromJSON,
    GetDeltastats200ResponseToJSON,
    GetKeyBlockMicroBlocks200ResponseFromJSON,
    GetKeyBlockMicroBlocks200ResponseToJSON,
    GetKeyBlocks200ResponseFromJSON,
    GetKeyBlocks200ResponseToJSON,
    GetMicroBlockTransactions200ResponseFromJSON,
    GetMicroBlockTransactions200ResponseToJSON,
    GetNamePointees200ResponseFromJSON,
    GetNamePointees200ResponseToJSON,
    GetNames200ResponseFromJSON,
    GetNames200ResponseToJSON,
    GetOracles200ResponseFromJSON,
    GetOracles200ResponseToJSON,
    GetSortedAex141Contracts200ResponseFromJSON,
    GetSortedAex141Contracts200ResponseToJSON,
    GetSortedAex9Tokens200ResponseFromJSON,
    GetSortedAex9Tokens200ResponseToJSON,
    GetTotalstats200ResponseFromJSON,
    GetTotalstats200ResponseToJSON,
    GetTransfers200ResponseFromJSON,
    GetTransfers200ResponseToJSON,
    GetTxCountById200ResponseFromJSON,
    GetTxCountById200ResponseToJSON,
    KeyBlockFromJSON,
    KeyBlockToJSON,
    MicroBlockFromJSON,
    MicroBlockToJSON,
    NameFromJSON,
    NameToJSON,
    NameClaimFromJSON,
    NameClaimToJSON,
    NameTransferFromJSON,
    NameTransferToJSON,
    NameUpdateFromJSON,
    NameUpdateToJSON,
    NotFoundResponseFromJSON,
    NotFoundResponseToJSON,
    OracleFromJSON,
    OracleToJSON,
    SearchNames200ResponseFromJSON,
    SearchNames200ResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    TxFromJSON,
    TxToJSON,
} from '../models';

export interface GetAccountActivitiesRequest {
    id: string;
    ownedOnly?: boolean;
    type?: GetAccountActivitiesTypeEnum;
    limit?: number;
    scope?: string;
    direction?: GetAccountActivitiesDirectionEnum;
}

export interface GetAex141ByContractRequest {
    id: string;
}

export interface GetAex141ContractOwnersRequest {
    contractId: string;
    limit?: number;
    direction?: GetAex141ContractOwnersDirectionEnum;
}

export interface GetAex141ContractTemplatesRequest {
    contractId: string;
    limit?: number;
    direction?: GetAex141ContractTemplatesDirectionEnum;
}

export interface GetAex141OwnedTokensRequest {
    limit?: number;
    direction?: GetAex141OwnedTokensDirectionEnum;
}

export interface GetAex141TemplateTokensRequest {
    contractId: string;
    templateId: number;
    limit?: number;
    direction?: GetAex141TemplateTokensDirectionEnum;
}

export interface GetAex141TokenOwnerRequest {
    contractId: string;
    tokenId: number;
}

export interface GetAex9AccountBalancesRequest {
}

export interface GetAex9ByContractRequest {
}

export interface GetAex9ContractAccountBalanceRequest {
    //
}

export interface GetAex9ContractAccountBalanceHistoryRequest {
    limit?: number;
    scope?: string;
    direction?: GetAex9ContractAccountBalanceHistoryDirectionEnum;
}

export interface GetAex9ContractBalancesRequest {
    limit?: number;
    direction?: GetAex9ContractBalancesDirectionEnum;
}

export interface GetAex9LogsCountRequest {
}

export interface GetAex9PairTransfersRequest {
    limit?: number;
    direction?: GetAex9PairTransfersDirectionEnum;
}

export interface GetAex9RecipientTransfersRequest {
    limit?: number;
    direction?: GetAex9RecipientTransfersDirectionEnum;
}

export interface GetAex9SenderTransfersRequest {
    limit?: number;
    direction?: GetAex9SenderTransfersDirectionEnum;
}

export interface GetBlockRequest {
    hashOrKbi: GetBlockHashOrKbiParameter;
}

export interface GetBlockByMbiRequest {
    kbi: number;
    mbi: number;
}

export interface GetBlocksRequest {
    limit?: number;
    scope?: string;
    direction?: GetBlocksDirectionEnum;
}

export interface GetChannelRequest {
    id: string;
}

export interface GetChannelsRequest {
    limit?: number;
    scope?: string;
    direction?: GetChannelsDirectionEnum;
    state?: GetChannelsStateEnum;
}

export interface GetContractsCallsRequest {
    limit?: number;
    scope?: string;
    direction?: GetContractsCallsDirectionEnum;
}

export interface GetContractsLogsRequest {
    contractId?: string;
    event?: string;
    _function?: string;
    functionPrefix?: string;
    data?: string;
    aexnArgs?: boolean;
    limit?: number;
    scope?: string;
    direction?: GetContractsLogsDirectionEnum;
}

export interface GetDeltastatsRequest {
    limit?: number;
    scope?: string;
    direction?: GetDeltastatsDirectionEnum;
}

export interface GetKeyBlockRequest {
    hashOrKbi: GetBlockHashOrKbiParameter;
}

export interface GetKeyBlockMicroBlocksRequest {
    hashOrKbi: GetBlockHashOrKbiParameter;
    limit?: number;
    scope?: string;
    direction?: GetKeyBlockMicroBlocksDirectionEnum;
}

export interface GetKeyBlocksRequest {
    limit?: number;
    scope?: string;
    direction?: GetKeyBlocksDirectionEnum;
}

export interface GetMicroBlockRequest {
    hash: string;
}

export interface GetMicroBlockTransactionsRequest {
    hash: string;
}

export interface GetNameRequest {
    id: string;
}

export interface GetNameAuctionRequest {
    id: string;
    limit?: number;
    scope?: string;
    direction?: GetNameAuctionDirectionEnum;
}

export interface GetNameClaimsRequest {
    id: string;
    limit?: number;
    scope?: string;
    direction?: GetNameClaimsDirectionEnum;
}

export interface GetNamePointeesRequest {
    id: string;
}

export interface GetNamePointersRequest {
    id: string;
}

export interface GetNameTransfersRequest {
    id: string;
    limit?: number;
    scope?: string;
    direction?: GetNameTransfersDirectionEnum;
}

export interface GetNameUpdatesRequest {
    id: string;
    limit?: number;
    scope?: string;
    direction?: GetNameUpdatesDirectionEnum;
}

export interface GetNamesRequest {
    by?: string;
    ownedBy?: string;
    state?: string;
    limit?: number;
    direction?: GetNamesDirectionEnum;
}

export interface GetNamesAuctionsRequest {
    limit?: number;
    scope?: string;
    direction?: GetNamesAuctionsDirectionEnum;
}

export interface GetOracleRequest {
    id: string;
}

export interface GetOraclesRequest {
    limit?: number;
    scope?: string;
    direction?: GetOraclesDirectionEnum;
}

export interface GetSortedAex141ContractsRequest {
    limit?: number;
    direction?: GetSortedAex141ContractsDirectionEnum;
    by?: string;
    prefix?: string;
}

export interface GetSortedAex9TokensRequest {
    limit?: number;
    direction?: GetSortedAex9TokensDirectionEnum;
}

export interface GetTotalstatsRequest {
    limit?: number;
    scope?: string;
    direction?: GetTotalstatsDirectionEnum;
}

export interface GetTransfersRequest {
    limit?: number;
    scope?: string;
    direction?: GetTransfersDirectionEnum;
}

export interface GetTxRequest {
    hashOrIndex: string;
}

export interface GetTxCountRequest {
    txType?: string;
    id?: string;
    scope?: string;
}

export interface GetTxCountByIdRequest {
    id: string;
}

export interface GetTxsRequest {
    type?: Array<GetTxsTypeEnum>;
    typeGroup?: Array<GetTxsTypeGroupEnum>;
    account?: string;
    contract?: string;
    channel?: string;
    oracle?: string;
    senderId?: string;
    recipientId?: string;
    limit?: number;
    scope?: string;
    direction?: GetTxsDirectionEnum;
}

export interface SearchNamesRequest {
    limit?: number;
    scope?: string;
    direction?: SearchNamesDirectionEnum;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get an account activities.
     */
    async getAccountActivitiesRaw(requestParameters: GetAccountActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountActivities200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAccountActivities.');
        }

        const queryParameters: any = {};

        if (requestParameters.ownedOnly !== undefined) {
            queryParameters['owned_only'] = requestParameters.ownedOnly;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accounts/{id}/activities`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountActivities200ResponseFromJSON(jsonValue));
    }

    /**
     * Get an account activities.
     */
    async getAccountActivities(requestParameters: GetAccountActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountActivities200Response> {
        const response = await this.getAccountActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get AEX141 contract meta-info, extensions, limits and stats.
     */
    async getAex141ByContractRaw(requestParameters: GetAex141ByContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Aex141Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAex141ByContract.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex141/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Aex141ResponseFromJSON(jsonValue));
    }

    /**
     * Get AEX141 contract meta-info, extensions, limits and stats.
     */
    async getAex141ByContract(requestParameters: GetAex141ByContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Aex141Response> {
        const response = await this.getAex141ByContractRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get owners of tokens of a AEX-141 contract.
     */
    async getAex141ContractOwnersRaw(requestParameters: GetAex141ContractOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAex141OwnedTokens200Response>> {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling getAex141ContractOwners.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex141/{contractId}/owners`.replace(`{${"contractId"}}`, encodeURIComponent(String(requestParameters.contractId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAex141OwnedTokens200ResponseFromJSON(jsonValue));
    }

    /**
     * Get owners of tokens of a AEX-141 contract.
     */
    async getAex141ContractOwners(requestParameters: GetAex141ContractOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAex141OwnedTokens200Response> {
        const response = await this.getAex141ContractOwnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get templates AEX-141 contract tokens.
     */
    async getAex141ContractTemplatesRaw(requestParameters: GetAex141ContractTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAex141ContractTemplates200Response>> {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling getAex141ContractTemplates.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex141/{contractId}/templates`.replace(`{${"contractId"}}`, encodeURIComponent(String(requestParameters.contractId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAex141ContractTemplates200ResponseFromJSON(jsonValue));
    }

    /**
     * Get templates AEX-141 contract tokens.
     */
    async getAex141ContractTemplates(requestParameters: GetAex141ContractTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAex141ContractTemplates200Response> {
        const response = await this.getAex141ContractTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get tokens owned by an account.
     */
    async getAex141OwnedTokensRaw(requestParameters: GetAex141OwnedTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAex141OwnedTokens200Response>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling getAex141OwnedTokens.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex141/owned-nfts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAex141OwnedTokens200ResponseFromJSON(jsonValue));
    }

    /**
     * Get tokens owned by an account.
     */
    async getAex141OwnedTokens(requestParameters: GetAex141OwnedTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAex141OwnedTokens200Response> {
        const response = await this.getAex141OwnedTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get AEX-141 template tokens.
     */
    async getAex141TemplateTokensRaw(requestParameters: GetAex141TemplateTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAex141TemplateTokens200Response>> {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling getAex141TemplateTokens.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling getAex141TemplateTokens.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex141/{contractId}/templates/{templateId}/tokens`.replace(`{${"contractId"}}`, encodeURIComponent(String(requestParameters.contractId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAex141TemplateTokens200ResponseFromJSON(jsonValue));
    }

    /**
     * Get AEX-141 template tokens.
     */
    async getAex141TemplateTokens(requestParameters: GetAex141TemplateTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAex141TemplateTokens200Response> {
        const response = await this.getAex141TemplateTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get owner of a NFT (AEX-141 token).
     */
    async getAex141TokenOwnerRaw(requestParameters: GetAex141TokenOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling getAex141TokenOwner.');
        }

        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
            throw new runtime.RequiredError('tokenId','Required parameter requestParameters.tokenId was null or undefined when calling getAex141TokenOwner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex141/{contractId}/owner/{tokenId}`.replace(`{${"contractId"}}`, encodeURIComponent(String(requestParameters.contractId))).replace(`{${"tokenId"}}`, encodeURIComponent(String(requestParameters.tokenId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get owner of a NFT (AEX-141 token).
     */
    async getAex141TokenOwner(requestParameters: GetAex141TokenOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getAex141TokenOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all AEX9 balances for an account on the last block.
     */
    async getAex9AccountBalancesRaw(requestParameters: GetAex9AccountBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Aex9BalanceResponse>>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling getAex9AccountBalances.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex9/account-balances/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(Aex9BalanceResponseFromJSON));
    }

    /**
     * Get all AEX9 balances for an account on the last block.
     */
    async getAex9AccountBalances(requestParameters: GetAex9AccountBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Aex9BalanceResponse>> {
        const response = await this.getAex9AccountBalancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get AEX9 creation and meta_info information by contract id.
     */
    async getAex9ByContractRaw(requestParameters: GetAex9ByContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling getAex9ByContract.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex9/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get AEX9 creation and meta_info information by contract id.
     */
    async getAex9ByContract(requestParameters: GetAex9ByContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAex9ByContractRaw(requestParameters, initOverrides);
    }

    /**
     * Get AEX9 balance for an account on a contract.
     */
    async getAex9ContractAccountBalanceRaw(requestParameters: GetAex9ContractAccountBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Aex9BalanceResponse>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling getAex9ContractAccountBalance.');
        }

        if (requestParameters.UNKNOWN_PARAMETER_NAME2 === null || requestParameters.UNKNOWN_PARAMETER_NAME2 === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME2','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME2 was null or undefined when calling getAex9ContractAccountBalance.');
        }

        if (requestParameters.UNKNOWN_PARAMETER_NAME3 === null || requestParameters.UNKNOWN_PARAMETER_NAME3 === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME3','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME3 was null or undefined when calling getAex9ContractAccountBalance.');
        }

        const queryParameters: any = {};

        if (requestParameters.UNKNOWN_PARAMETER_NAME3 !== undefined) {
            queryParameters['hash'] = requestParameters.UNKNOWN_PARAMETER_NAME3;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex9/{contractId}/balances/{accountId}`.replace(`{${"contractId"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME2))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Aex9BalanceResponseFromJSON(jsonValue));
    }

    /**
     * Get AEX9 balance for an account on a contract.
     */
    async getAex9ContractAccountBalance(requestParameters: GetAex9ContractAccountBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Aex9BalanceResponse> {
        const response = await this.getAex9ContractAccountBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get AEX9 account balance on a contract throughout all heights when changed.
     */
    async getAex9ContractAccountBalanceHistoryRaw(requestParameters: GetAex9ContractAccountBalanceHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAex9ContractAccountBalanceHistory200Response>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling getAex9ContractAccountBalanceHistory.');
        }

        if (requestParameters.UNKNOWN_PARAMETER_NAME2 === null || requestParameters.UNKNOWN_PARAMETER_NAME2 === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME2','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME2 was null or undefined when calling getAex9ContractAccountBalanceHistory.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex9/{contractId}/balances/{accountId}/history`.replace(`{${"contractId"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME2))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAex9ContractAccountBalanceHistory200ResponseFromJSON(jsonValue));
    }

    /**
     * Get AEX9 account balance on a contract throughout all heights when changed.
     */
    async getAex9ContractAccountBalanceHistory(requestParameters: GetAex9ContractAccountBalanceHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAex9ContractAccountBalanceHistory200Response> {
        const response = await this.getAex9ContractAccountBalanceHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get AEX9 balances on a contract.
     */
    async getAex9ContractBalancesRaw(requestParameters: GetAex9ContractBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAex9ContractBalances200Response>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling getAex9ContractBalances.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        if (requestParameters.UNKNOWN_PARAMETER_NAME2 !== undefined) {
            queryParameters['by'] = requestParameters.UNKNOWN_PARAMETER_NAME2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex9/{contractId}/balances`.replace(`{${"contractId"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAex9ContractBalances200ResponseFromJSON(jsonValue));
    }

    /**
     * Get AEX9 balances on a contract.
     */
    async getAex9ContractBalances(requestParameters: GetAex9ContractBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAex9ContractBalances200Response> {
        const response = await this.getAex9ContractBalancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get AEX9 token events count.
     */
    async getAex9LogsCountRaw(requestParameters: GetAex9LogsCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling getAex9LogsCount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex9/{contractId}/logs-count`.replace(`{${"contractId"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get AEX9 token events count.
     */
    async getAex9LogsCount(requestParameters: GetAex9LogsCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.getAex9LogsCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get AEX9 transfers filtered by sender and recipient.
     */
    async getAex9PairTransfersRaw(requestParameters: GetAex9PairTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAex9PairTransfers200Response>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling getAex9PairTransfers.');
        }

        if (requestParameters.UNKNOWN_PARAMETER_NAME2 === null || requestParameters.UNKNOWN_PARAMETER_NAME2 === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME2','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME2 was null or undefined when calling getAex9PairTransfers.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex9/transfers/from-to/{sender}/{recipient}`.replace(`{${"sender"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))).replace(`{${"recipient"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME2))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAex9PairTransfers200ResponseFromJSON(jsonValue));
    }

    /**
     * Get AEX9 transfers filtered by sender and recipient.
     */
    async getAex9PairTransfers(requestParameters: GetAex9PairTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAex9PairTransfers200Response> {
        const response = await this.getAex9PairTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get AEX9 transfers filtered by recipient.
     */
    async getAex9RecipientTransfersRaw(requestParameters: GetAex9RecipientTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAex9PairTransfers200Response>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling getAex9RecipientTransfers.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex9/transfers/to/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAex9PairTransfers200ResponseFromJSON(jsonValue));
    }

    /**
     * Get AEX9 transfers filtered by recipient.
     */
    async getAex9RecipientTransfers(requestParameters: GetAex9RecipientTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAex9PairTransfers200Response> {
        const response = await this.getAex9RecipientTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get AEX9 transfers filtered by sender.
     */
    async getAex9SenderTransfersRaw(requestParameters: GetAex9SenderTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAex9PairTransfers200Response>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling getAex9SenderTransfers.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex9/transfers/from/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAex9PairTransfers200ResponseFromJSON(jsonValue));
    }

    /**
     * Get AEX9 transfers filtered by sender.
     */
    async getAex9SenderTransfers(requestParameters: GetAex9SenderTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAex9PairTransfers200Response> {
        const response = await this.getAex9SenderTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get AEX9 tokens count.
     */
    async getAex9TokensCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex9/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get AEX9 tokens count.
     */
    async getAex9TokensCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.getAex9TokensCountRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a single block.
     */
    async getBlockRaw(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>> {
        if (requestParameters.hashOrKbi === null || requestParameters.hashOrKbi === undefined) {
            throw new runtime.RequiredError('hashOrKbi','Required parameter requestParameters.hashOrKbi was null or undefined when calling getBlock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blocks/{hash_or_kbi}`.replace(`{${"hash_or_kbi"}}`, encodeURIComponent(String(requestParameters.hashOrKbi))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockFromJSON(jsonValue));
    }

    /**
     * Get a single block.
     */
    async getBlock(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block> {
        const response = await this.getBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single block.
     */
    async getBlockByMbiRaw(requestParameters: GetBlockByMbiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>> {
        if (requestParameters.kbi === null || requestParameters.kbi === undefined) {
            throw new runtime.RequiredError('kbi','Required parameter requestParameters.kbi was null or undefined when calling getBlockByMbi.');
        }

        if (requestParameters.mbi === null || requestParameters.mbi === undefined) {
            throw new runtime.RequiredError('mbi','Required parameter requestParameters.mbi was null or undefined when calling getBlockByMbi.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blocks/{kbi}/{mbi}`.replace(`{${"kbi"}}`, encodeURIComponent(String(requestParameters.kbi))).replace(`{${"mbi"}}`, encodeURIComponent(String(requestParameters.mbi))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockFromJSON(jsonValue));
    }

    /**
     * Get a single block.
     */
    async getBlockByMbi(requestParameters: GetBlockByMbiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block> {
        const response = await this.getBlockByMbiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get multiple blocks.
     */
    async getBlocksRaw(requestParameters: GetBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlocks200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBlocks200ResponseFromJSON(jsonValue));
    }

    /**
     * Get multiple blocks.
     */
    async getBlocks(requestParameters: GetBlocksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlocks200Response> {
        const response = await this.getBlocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single channel.
     */
    async getChannelRaw(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/channels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelFromJSON(jsonValue));
    }

    /**
     * Get a single channel.
     */
    async getChannel(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channel> {
        const response = await this.getChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get multiple channels.
     */
    async getChannelsRaw(requestParameters: GetChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChannels200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/channels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannels200ResponseFromJSON(jsonValue));
    }

    /**
     * Get multiple channels.
     */
    async getChannels(requestParameters: GetChannelsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChannels200Response> {
        const response = await this.getChannelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get contract calls.
     */
    async getContractsCallsRaw(requestParameters: GetContractsCallsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContractsCalls200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contracts/calls`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContractsCalls200ResponseFromJSON(jsonValue));
    }

    /**
     * Get contract calls.
     */
    async getContractsCalls(requestParameters: GetContractsCallsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContractsCalls200Response> {
        const response = await this.getContractsCallsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get contract logs.
     */
    async getContractsLogsRaw(requestParameters: GetContractsLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContractsLogs200Response>> {
        const queryParameters: any = {};

        if (requestParameters.contractId !== undefined) {
            queryParameters['contract_id'] = requestParameters.contractId;
        }

        if (requestParameters.event !== undefined) {
            queryParameters['event'] = requestParameters.event;
        }

        if (requestParameters._function !== undefined) {
            queryParameters['function'] = requestParameters._function;
        }

        if (requestParameters.functionPrefix !== undefined) {
            queryParameters['function_prefix'] = requestParameters.functionPrefix;
        }

        if (requestParameters.data !== undefined) {
            queryParameters['data'] = requestParameters.data;
        }

        if (requestParameters.aexnArgs !== undefined) {
            queryParameters['aexn-args'] = requestParameters.aexnArgs;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contracts/logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContractsLogs200ResponseFromJSON(jsonValue));
    }

    /**
     * Get contract logs.
     */
    async getContractsLogs(requestParameters: GetContractsLogsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContractsLogs200Response> {
        const response = await this.getContractsLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get delta stats.
     */
    async getDeltastatsRaw(requestParameters: GetDeltastatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDeltastats200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/deltastats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDeltastats200ResponseFromJSON(jsonValue));
    }

    /**
     * Get delta stats.
     */
    async getDeltastats(requestParameters: GetDeltastatsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDeltastats200Response> {
        const response = await this.getDeltastatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single key block.
     */
    async getKeyBlockRaw(requestParameters: GetKeyBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeyBlock>> {
        if (requestParameters.hashOrKbi === null || requestParameters.hashOrKbi === undefined) {
            throw new runtime.RequiredError('hashOrKbi','Required parameter requestParameters.hashOrKbi was null or undefined when calling getKeyBlock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/key-blocks/{hash_or_kbi}`.replace(`{${"hash_or_kbi"}}`, encodeURIComponent(String(requestParameters.hashOrKbi))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyBlockFromJSON(jsonValue));
    }

    /**
     * Get a single key block.
     */
    async getKeyBlock(requestParameters: GetKeyBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeyBlock> {
        const response = await this.getKeyBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the key block micro blocks.
     */
    async getKeyBlockMicroBlocksRaw(requestParameters: GetKeyBlockMicroBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetKeyBlockMicroBlocks200Response>> {
        if (requestParameters.hashOrKbi === null || requestParameters.hashOrKbi === undefined) {
            throw new runtime.RequiredError('hashOrKbi','Required parameter requestParameters.hashOrKbi was null or undefined when calling getKeyBlockMicroBlocks.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/key-blocks/{hash_or_kbi}/micro-blocks`.replace(`{${"hash_or_kbi"}}`, encodeURIComponent(String(requestParameters.hashOrKbi))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetKeyBlockMicroBlocks200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the key block micro blocks.
     */
    async getKeyBlockMicroBlocks(requestParameters: GetKeyBlockMicroBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetKeyBlockMicroBlocks200Response> {
        const response = await this.getKeyBlockMicroBlocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get multiple key blocks.
     */
    async getKeyBlocksRaw(requestParameters: GetKeyBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetKeyBlocks200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/key-blocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetKeyBlocks200ResponseFromJSON(jsonValue));
    }

    /**
     * Get multiple key blocks.
     */
    async getKeyBlocks(requestParameters: GetKeyBlocksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetKeyBlocks200Response> {
        const response = await this.getKeyBlocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a micro block
     */
    async getMicroBlockRaw(requestParameters: GetMicroBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MicroBlock>> {
        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new runtime.RequiredError('hash','Required parameter requestParameters.hash was null or undefined when calling getMicroBlock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/micro-blocks/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MicroBlockFromJSON(jsonValue));
    }

    /**
     * Get a micro block
     */
    async getMicroBlock(requestParameters: GetMicroBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MicroBlock> {
        const response = await this.getMicroBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a micro block transactions
     */
    async getMicroBlockTransactionsRaw(requestParameters: GetMicroBlockTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMicroBlockTransactions200Response>> {
        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new runtime.RequiredError('hash','Required parameter requestParameters.hash was null or undefined when calling getMicroBlockTransactions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/micro-blocks/{hash}/txs`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMicroBlockTransactions200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a micro block transactions
     */
    async getMicroBlockTransactions(requestParameters: GetMicroBlockTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMicroBlockTransactions200Response> {
        const response = await this.getMicroBlockTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single name.
     */
    async getNameRaw(requestParameters: GetNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Name>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/names/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NameFromJSON(jsonValue));
    }

    /**
     * Get a single name.
     */
    async getName(requestParameters: GetNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Name> {
        const response = await this.getNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get name auction
     */
    async getNameAuctionRaw(requestParameters: GetNameAuctionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Auction>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNameAuction.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/names/{id}/auction`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuctionFromJSON(jsonValue));
    }

    /**
     * Get name auction
     */
    async getNameAuction(requestParameters: GetNameAuctionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Auction> {
        const response = await this.getNameAuctionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get name claims
     */
    async getNameClaimsRaw(requestParameters: GetNameClaimsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NameClaim>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNameClaims.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/names/{id}/claims`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NameClaimFromJSON(jsonValue));
    }

    /**
     * Get name claims
     */
    async getNameClaims(requestParameters: GetNameClaimsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NameClaim> {
        const response = await this.getNameClaimsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get name pointees
     */
    async getNamePointeesRaw(requestParameters: GetNamePointeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNamePointees200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNamePointees.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/names/{id}/pointees`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNamePointees200ResponseFromJSON(jsonValue));
    }

    /**
     * Get name pointees
     */
    async getNamePointees(requestParameters: GetNamePointeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNamePointees200Response> {
        const response = await this.getNamePointeesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get name pointers
     */
    async getNamePointersRaw(requestParameters: GetNamePointersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNamePointers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/names/{id}/pointers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get name pointers
     */
    async getNamePointers(requestParameters: GetNamePointersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getNamePointersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get name transfers
     */
    async getNameTransfersRaw(requestParameters: GetNameTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NameTransfer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNameTransfers.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/names/{id}/transfers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NameTransferFromJSON(jsonValue));
    }

    /**
     * Get name transfers
     */
    async getNameTransfers(requestParameters: GetNameTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NameTransfer> {
        const response = await this.getNameTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get name updates
     */
    async getNameUpdatesRaw(requestParameters: GetNameUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NameUpdate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNameUpdates.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/names/{id}/updates`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NameUpdateFromJSON(jsonValue));
    }

    /**
     * Get name updates
     */
    async getNameUpdates(requestParameters: GetNameUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NameUpdate> {
        const response = await this.getNameUpdatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get multiple names.
     */
    async getNamesRaw(requestParameters: GetNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNames200Response>> {
        const queryParameters: any = {};

        if (requestParameters.by !== undefined) {
            queryParameters['by'] = requestParameters.by;
        }

        if (requestParameters.ownedBy !== undefined) {
            queryParameters['owned_by'] = requestParameters.ownedBy;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/names`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNames200ResponseFromJSON(jsonValue));
    }

    /**
     * Get multiple names.
     */
    async getNames(requestParameters: GetNamesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNames200Response> {
        const response = await this.getNamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get multiple names.
     */
    async getNamesAuctionsRaw(requestParameters: GetNamesAuctionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Auction>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/names/auctions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuctionFromJSON(jsonValue));
    }

    /**
     * Get multiple names.
     */
    async getNamesAuctions(requestParameters: GetNamesAuctionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Auction> {
        const response = await this.getNamesAuctionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single oracle.
     */
    async getOracleRaw(requestParameters: GetOracleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Oracle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOracle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oracle/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OracleFromJSON(jsonValue));
    }

    /**
     * Get a single oracle.
     */
    async getOracle(requestParameters: GetOracleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Oracle> {
        const response = await this.getOracleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get multiple oracles.
     */
    async getOraclesRaw(requestParameters: GetOraclesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOracles200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oracles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOracles200ResponseFromJSON(jsonValue));
    }

    /**
     * Get multiple oracles.
     */
    async getOracles(requestParameters: GetOraclesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOracles200Response> {
        const response = await this.getOraclesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get AEX141 contracts sorted by name or symbol.
     */
    async getSortedAex141ContractsRaw(requestParameters: GetSortedAex141ContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSortedAex141Contracts200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        if (requestParameters.by !== undefined) {
            queryParameters['by'] = requestParameters.by;
        }

        if (requestParameters.prefix !== undefined) {
            queryParameters['prefix'] = requestParameters.prefix;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex141`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSortedAex141Contracts200ResponseFromJSON(jsonValue));
    }

    /**
     * Get AEX141 contracts sorted by name or symbol.
     */
    async getSortedAex141Contracts(requestParameters: GetSortedAex141ContractsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSortedAex141Contracts200Response> {
        const response = await this.getSortedAex141ContractsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get AEX9 tokens sorted by name or symbol.
     */
    async getSortedAex9TokensRaw(requestParameters: GetSortedAex9TokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSortedAex9Tokens200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        if (requestParameters.UNKNOWN_PARAMETER_NAME !== undefined) {
            queryParameters['by'] = requestParameters.UNKNOWN_PARAMETER_NAME;
        }

        if (requestParameters.UNKNOWN_PARAMETER_NAME2 !== undefined) {
            queryParameters['prefix'] = requestParameters.UNKNOWN_PARAMETER_NAME2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aex9`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSortedAex9Tokens200ResponseFromJSON(jsonValue));
    }

    /**
     * Get AEX9 tokens sorted by name or symbol.
     */
    async getSortedAex9Tokens(requestParameters: GetSortedAex9TokensRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSortedAex9Tokens200Response> {
        const response = await this.getSortedAex9TokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the current syncing status of both middleware and the node
     */
    async getStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Gets the current syncing status of both middleware and the node
     */
    async getStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.getStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get total accumulated stats.
     */
    async getTotalstatsRaw(requestParameters: GetTotalstatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTotalstats200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/totalstats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTotalstats200ResponseFromJSON(jsonValue));
    }

    /**
     * Get total accumulated stats.
     */
    async getTotalstats(requestParameters: GetTotalstatsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTotalstats200Response> {
        const response = await this.getTotalstatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get multiple transfers.
     */
    async getTransfersRaw(requestParameters: GetTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransfers200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transfers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransfers200ResponseFromJSON(jsonValue));
    }

    /**
     * Get multiple transfers.
     */
    async getTransfers(requestParameters: GetTransfersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransfers200Response> {
        const response = await this.getTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single transaction.
     */
    async getTxRaw(requestParameters: GetTxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tx>> {
        if (requestParameters.hashOrIndex === null || requestParameters.hashOrIndex === undefined) {
            throw new runtime.RequiredError('hashOrIndex','Required parameter requestParameters.hashOrIndex was null or undefined when calling getTx.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/txs/{hash_or_index}`.replace(`{${"hash_or_index"}}`, encodeURIComponent(String(requestParameters.hashOrIndex))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TxFromJSON(jsonValue));
    }

    /**
     * Get a single transaction.
     */
    async getTx(requestParameters: GetTxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tx> {
        const response = await this.getTxRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get count of transactions at the latest height.
     */
    async getTxCountRaw(requestParameters: GetTxCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.txType !== undefined) {
            queryParameters['tx_type'] = requestParameters.txType;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/txs/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get count of transactions at the latest height.
     */
    async getTxCount(requestParameters: GetTxCountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.getTxCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get transactions count and its type for given aeternity ID.
     */
    async getTxCountByIdRaw(requestParameters: GetTxCountByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTxCountById200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTxCountById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/txs/count/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTxCountById200ResponseFromJSON(jsonValue));
    }

    /**
     * Get transactions count and its type for given aeternity ID.
     */
    async getTxCountById(requestParameters: GetTxCountByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTxCountById200Response> {
        const response = await this.getTxCountByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get multiple transactions.
     */
    async getTxsRaw(requestParameters: GetTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMicroBlockTransactions200Response>> {
        const queryParameters: any = {};

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.typeGroup) {
            queryParameters['type_group'] = requestParameters.typeGroup;
        }

        if (requestParameters.account !== undefined) {
            queryParameters['account'] = requestParameters.account;
        }

        if (requestParameters.contract !== undefined) {
            queryParameters['contract'] = requestParameters.contract;
        }

        if (requestParameters.channel !== undefined) {
            queryParameters['channel'] = requestParameters.channel;
        }

        if (requestParameters.oracle !== undefined) {
            queryParameters['oracle'] = requestParameters.oracle;
        }

        if (requestParameters.senderId !== undefined) {
            queryParameters['sender_id'] = requestParameters.senderId;
        }

        if (requestParameters.recipientId !== undefined) {
            queryParameters['recipient_id'] = requestParameters.recipientId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/txs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMicroBlockTransactions200ResponseFromJSON(jsonValue));
    }

    /**
     * Get multiple transactions.
     */
    async getTxs(requestParameters: GetTxsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMicroBlockTransactions200Response> {
        const response = await this.getTxsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get multiple names.
     */
    async searchNamesRaw(requestParameters: SearchNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchNames200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/names/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchNames200ResponseFromJSON(jsonValue));
    }

    /**
     * Get multiple names.
     */
    async searchNames(requestParameters: SearchNamesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchNames200Response> {
        const response = await this.searchNamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAccountActivitiesTypeEnum = {
    Transactions: 'transactions',
    Aexn: 'aexn',
    Aex9: 'aex9',
    Aex141: 'aex141',
    Contract: 'contract',
    Transfers: 'transfers',
    Claims: 'claims'
} as const;
export type GetAccountActivitiesTypeEnum = typeof GetAccountActivitiesTypeEnum[keyof typeof GetAccountActivitiesTypeEnum];
/**
 * @export
 */
export const GetAccountActivitiesDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetAccountActivitiesDirectionEnum = typeof GetAccountActivitiesDirectionEnum[keyof typeof GetAccountActivitiesDirectionEnum];
/**
 * @export
 */
export const GetAex141ContractOwnersDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetAex141ContractOwnersDirectionEnum = typeof GetAex141ContractOwnersDirectionEnum[keyof typeof GetAex141ContractOwnersDirectionEnum];
/**
 * @export
 */
export const GetAex141ContractTemplatesDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetAex141ContractTemplatesDirectionEnum = typeof GetAex141ContractTemplatesDirectionEnum[keyof typeof GetAex141ContractTemplatesDirectionEnum];
/**
 * @export
 */
export const GetAex141OwnedTokensDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetAex141OwnedTokensDirectionEnum = typeof GetAex141OwnedTokensDirectionEnum[keyof typeof GetAex141OwnedTokensDirectionEnum];
/**
 * @export
 */
export const GetAex141TemplateTokensDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetAex141TemplateTokensDirectionEnum = typeof GetAex141TemplateTokensDirectionEnum[keyof typeof GetAex141TemplateTokensDirectionEnum];
/**
 * @export
 */
export const GetAex9ContractAccountBalanceHistoryDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetAex9ContractAccountBalanceHistoryDirectionEnum = typeof GetAex9ContractAccountBalanceHistoryDirectionEnum[keyof typeof GetAex9ContractAccountBalanceHistoryDirectionEnum];
/**
 * @export
 */
export const GetAex9ContractBalancesDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetAex9ContractBalancesDirectionEnum = typeof GetAex9ContractBalancesDirectionEnum[keyof typeof GetAex9ContractBalancesDirectionEnum];
/**
 * @export
 */
export const GetAex9PairTransfersDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetAex9PairTransfersDirectionEnum = typeof GetAex9PairTransfersDirectionEnum[keyof typeof GetAex9PairTransfersDirectionEnum];
/**
 * @export
 */
export const GetAex9RecipientTransfersDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetAex9RecipientTransfersDirectionEnum = typeof GetAex9RecipientTransfersDirectionEnum[keyof typeof GetAex9RecipientTransfersDirectionEnum];
/**
 * @export
 */
export const GetAex9SenderTransfersDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetAex9SenderTransfersDirectionEnum = typeof GetAex9SenderTransfersDirectionEnum[keyof typeof GetAex9SenderTransfersDirectionEnum];
/**
 * @export
 */
export const GetBlocksDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetBlocksDirectionEnum = typeof GetBlocksDirectionEnum[keyof typeof GetBlocksDirectionEnum];
/**
 * @export
 */
export const GetChannelsDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetChannelsDirectionEnum = typeof GetChannelsDirectionEnum[keyof typeof GetChannelsDirectionEnum];
/**
 * @export
 */
export const GetChannelsStateEnum = {
    Active: 'active',
    Inactive: 'inactive'
} as const;
export type GetChannelsStateEnum = typeof GetChannelsStateEnum[keyof typeof GetChannelsStateEnum];
/**
 * @export
 */
export const GetContractsCallsDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetContractsCallsDirectionEnum = typeof GetContractsCallsDirectionEnum[keyof typeof GetContractsCallsDirectionEnum];
/**
 * @export
 */
export const GetContractsLogsDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetContractsLogsDirectionEnum = typeof GetContractsLogsDirectionEnum[keyof typeof GetContractsLogsDirectionEnum];
/**
 * @export
 */
export const GetDeltastatsDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetDeltastatsDirectionEnum = typeof GetDeltastatsDirectionEnum[keyof typeof GetDeltastatsDirectionEnum];
/**
 * @export
 */
export const GetKeyBlockMicroBlocksDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetKeyBlockMicroBlocksDirectionEnum = typeof GetKeyBlockMicroBlocksDirectionEnum[keyof typeof GetKeyBlockMicroBlocksDirectionEnum];
/**
 * @export
 */
export const GetKeyBlocksDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetKeyBlocksDirectionEnum = typeof GetKeyBlocksDirectionEnum[keyof typeof GetKeyBlocksDirectionEnum];
/**
 * @export
 */
export const GetNameAuctionDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetNameAuctionDirectionEnum = typeof GetNameAuctionDirectionEnum[keyof typeof GetNameAuctionDirectionEnum];
/**
 * @export
 */
export const GetNameClaimsDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetNameClaimsDirectionEnum = typeof GetNameClaimsDirectionEnum[keyof typeof GetNameClaimsDirectionEnum];
/**
 * @export
 */
export const GetNameTransfersDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetNameTransfersDirectionEnum = typeof GetNameTransfersDirectionEnum[keyof typeof GetNameTransfersDirectionEnum];
/**
 * @export
 */
export const GetNameUpdatesDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetNameUpdatesDirectionEnum = typeof GetNameUpdatesDirectionEnum[keyof typeof GetNameUpdatesDirectionEnum];
/**
 * @export
 */
export const GetNamesDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetNamesDirectionEnum = typeof GetNamesDirectionEnum[keyof typeof GetNamesDirectionEnum];
/**
 * @export
 */
export const GetNamesAuctionsDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetNamesAuctionsDirectionEnum = typeof GetNamesAuctionsDirectionEnum[keyof typeof GetNamesAuctionsDirectionEnum];
/**
 * @export
 */
export const GetOraclesDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetOraclesDirectionEnum = typeof GetOraclesDirectionEnum[keyof typeof GetOraclesDirectionEnum];
/**
 * @export
 */
export const GetSortedAex141ContractsDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetSortedAex141ContractsDirectionEnum = typeof GetSortedAex141ContractsDirectionEnum[keyof typeof GetSortedAex141ContractsDirectionEnum];
/**
 * @export
 */
export const GetSortedAex9TokensDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetSortedAex9TokensDirectionEnum = typeof GetSortedAex9TokensDirectionEnum[keyof typeof GetSortedAex9TokensDirectionEnum];
/**
 * @export
 */
export const GetTotalstatsDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetTotalstatsDirectionEnum = typeof GetTotalstatsDirectionEnum[keyof typeof GetTotalstatsDirectionEnum];
/**
 * @export
 */
export const GetTransfersDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetTransfersDirectionEnum = typeof GetTransfersDirectionEnum[keyof typeof GetTransfersDirectionEnum];
/**
 * @export
 */
export const GetTxsTypeEnum = {
    ChannelCloseMutual: 'channel_close_mutual',
    ChannelCloseSolo: 'channel_close_solo',
    ChannelCreate: 'channel_create',
    ChannelDeposit: 'channel_deposit',
    ChannelForceProgress: 'channel_force_progress',
    ChannelOffchain: 'channel_offchain',
    ChannelSettle: 'channel_settle',
    ChannelSlash: 'channel_slash',
    ChannelSnapshotSolo: 'channel_snapshot_solo',
    ChannelWithdraw: 'channel_withdraw',
    ContractCall: 'contract_call',
    ContractCreate: 'contract_create',
    GaAttach: 'ga_attach',
    GaMeta: 'ga_meta',
    NameClaim: 'name_claim',
    NamePreclaim: 'name_preclaim',
    NameRevoke: 'name_revoke',
    NameTransfer: 'name_transfer',
    NameUpdate: 'name_update',
    OracleExtend: 'oracle_extend',
    OracleQuery: 'oracle_query',
    OracleRegister: 'oracle_register',
    OracleResponse: 'oracle_response',
    PayingFor: 'paying_for',
    Spend: 'spend'
} as const;
export type GetTxsTypeEnum = typeof GetTxsTypeEnum[keyof typeof GetTxsTypeEnum];
/**
 * @export
 */
export const GetTxsTypeGroupEnum = {
    Channel: 'channel',
    Contract: 'contract',
    Ga: 'ga',
    Name: 'name',
    Oracle: 'oracle',
    PayingFor: 'paying_for',
    Spend: 'spend'
} as const;
export type GetTxsTypeGroupEnum = typeof GetTxsTypeGroupEnum[keyof typeof GetTxsTypeGroupEnum];
/**
 * @export
 */
export const GetTxsDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type GetTxsDirectionEnum = typeof GetTxsDirectionEnum[keyof typeof GetTxsDirectionEnum];
/**
 * @export
 */
export const SearchNamesDirectionEnum = {
    Forward: 'forward',
    Backward: 'backward'
} as const;
export type SearchNamesDirectionEnum = typeof SearchNamesDirectionEnum[keyof typeof SearchNamesDirectionEnum];
