/* tslint:disable */
/* eslint-disable */
/**
 * Aeternity Middleware
 * API for [Aeternity Middleware](https://github.com/aeternity/ae_mdw)
 *
 * The version of the OpenAPI document: 1.51.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * DeltaStat
 * @export
 * @interface DeltaStat
 */
export interface DeltaStat {
    /**
     * The number of auctions started
     * @type {number}
     * @memberof DeltaStat
     */
    auctionsStarted?: number;
    /**
     * The block reward
     * @type {number}
     * @memberof DeltaStat
     */
    blockReward?: number;
    /**
     * The number of contracts created
     * @type {number}
     * @memberof DeltaStat
     */
    contractsCreated?: number;
    /**
     * The dev reward
     * @type {number}
     * @memberof DeltaStat
     */
    devReward?: number;
    /**
     * The generation
     * @type {number}
     * @memberof DeltaStat
     */
    height?: number;
    /**
     * The number of names activated
     * @type {number}
     * @memberof DeltaStat
     */
    namesActivated?: number;
    /**
     * The number of names expired
     * @type {number}
     * @memberof DeltaStat
     */
    namesExpired?: number;
    /**
     * The number of names revoked
     * @type {number}
     * @memberof DeltaStat
     */
    namesRevoked?: number;
    /**
     * The number of oracles expired
     * @type {number}
     * @memberof DeltaStat
     */
    oraclesExpired?: number;
    /**
     * The number of oracles registered
     * @type {number}
     * @memberof DeltaStat
     */
    oraclesRegistered?: number;
}

/**
 * Check if a given object implements the DeltaStat interface.
 */
export function instanceOfDeltaStat(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DeltaStatFromJSON(json: any): DeltaStat {
    return DeltaStatFromJSONTyped(json, false);
}

export function DeltaStatFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeltaStat {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'auctionsStarted': !exists(json, 'auctions_started') ? undefined : json['auctions_started'],
        'blockReward': !exists(json, 'block_reward') ? undefined : json['block_reward'],
        'contractsCreated': !exists(json, 'contracts_created') ? undefined : json['contracts_created'],
        'devReward': !exists(json, 'dev_reward') ? undefined : json['dev_reward'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'namesActivated': !exists(json, 'names_activated') ? undefined : json['names_activated'],
        'namesExpired': !exists(json, 'names_expired') ? undefined : json['names_expired'],
        'namesRevoked': !exists(json, 'names_revoked') ? undefined : json['names_revoked'],
        'oraclesExpired': !exists(json, 'oracles_expired') ? undefined : json['oracles_expired'],
        'oraclesRegistered': !exists(json, 'oracles_registered') ? undefined : json['oracles_registered'],
    };
}

export function DeltaStatToJSON(value?: DeltaStat | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'auctions_started': value.auctionsStarted,
        'block_reward': value.blockReward,
        'contracts_created': value.contractsCreated,
        'dev_reward': value.devReward,
        'height': value.height,
        'names_activated': value.namesActivated,
        'names_expired': value.namesExpired,
        'names_revoked': value.namesRevoked,
        'oracles_expired': value.oraclesExpired,
        'oracles_registered': value.oraclesRegistered,
    };
}

