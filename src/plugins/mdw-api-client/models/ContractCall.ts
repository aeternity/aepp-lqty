/* tslint:disable */
/* eslint-disable */
/**
 * Aeternity Middleware
 * API for [Aeternity Middleware](https://github.com/aeternity/ae_mdw)
 *
 * The version of the OpenAPI document: 1.51.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * ContractCall
 * @export
 * @interface ContractCall
 */
export interface ContractCall {
    /**
     * 
     * @type {string}
     * @memberof ContractCall
     */
    blockHash?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractCall
     */
    callTxHash?: string;
    /**
     * 
     * @type {number}
     * @memberof ContractCall
     */
    callTxi?: number;
    /**
     * 
     * @type {string}
     * @memberof ContractCall
     */
    contractId?: string;
    /**
     * 
     * @type {number}
     * @memberof ContractCall
     */
    contractTxi?: number;
    /**
     * 
     * @type {string}
     * @memberof ContractCall
     */
    _function?: string;
    /**
     * 
     * @type {number}
     * @memberof ContractCall
     */
    height?: number;
    /**
     * 
     * @type {object}
     * @memberof ContractCall
     */
    internalTx?: object;
    /**
     * 
     * @type {number}
     * @memberof ContractCall
     */
    localIdx?: number;
    /**
     * 
     * @type {number}
     * @memberof ContractCall
     */
    microIndex?: number;
}

/**
 * Check if a given object implements the ContractCall interface.
 */
export function instanceOfContractCall(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ContractCallFromJSON(json: any): ContractCall {
    return ContractCallFromJSONTyped(json, false);
}

export function ContractCallFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContractCall {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockHash': !exists(json, 'block_hash') ? undefined : json['block_hash'],
        'callTxHash': !exists(json, 'call_tx_hash') ? undefined : json['call_tx_hash'],
        'callTxi': !exists(json, 'call_txi') ? undefined : json['call_txi'],
        'contractId': !exists(json, 'contract_id') ? undefined : json['contract_id'],
        'contractTxi': !exists(json, 'contract_txi') ? undefined : json['contract_txi'],
        '_function': !exists(json, 'function') ? undefined : json['function'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'internalTx': !exists(json, 'internal_tx') ? undefined : json['internal_tx'],
        'localIdx': !exists(json, 'local_idx') ? undefined : json['local_idx'],
        'microIndex': !exists(json, 'micro_index') ? undefined : json['micro_index'],
    };
}

export function ContractCallToJSON(value?: ContractCall | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'block_hash': value.blockHash,
        'call_tx_hash': value.callTxHash,
        'call_txi': value.callTxi,
        'contract_id': value.contractId,
        'contract_txi': value.contractTxi,
        'function': value._function,
        'height': value.height,
        'internal_tx': value.internalTx,
        'local_idx': value.localIdx,
        'micro_index': value.microIndex,
    };
}

