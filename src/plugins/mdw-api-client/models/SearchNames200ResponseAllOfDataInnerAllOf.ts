/* tslint:disable */
/* eslint-disable */
/**
 * Aeternity Middleware
 * API for [Aeternity Middleware](https://github.com/aeternity/ae_mdw)
 *
 * The version of the OpenAPI document: 1.51.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SearchNames200ResponseAllOfDataInnerAllOf
 */
export interface SearchNames200ResponseAllOfDataInnerAllOf {
    /**
     * 
     * @type {string}
     * @memberof SearchNames200ResponseAllOfDataInnerAllOf
     */
    status?: SearchNames200ResponseAllOfDataInnerAllOfStatusEnum;
}


/**
 * @export
 */
export const SearchNames200ResponseAllOfDataInnerAllOfStatusEnum = {
    Auction: 'auction',
    Active: 'active',
    Inactive: 'inactive'
} as const;
export type SearchNames200ResponseAllOfDataInnerAllOfStatusEnum = typeof SearchNames200ResponseAllOfDataInnerAllOfStatusEnum[keyof typeof SearchNames200ResponseAllOfDataInnerAllOfStatusEnum];


/**
 * Check if a given object implements the SearchNames200ResponseAllOfDataInnerAllOf interface.
 */
export function instanceOfSearchNames200ResponseAllOfDataInnerAllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SearchNames200ResponseAllOfDataInnerAllOfFromJSON(json: any): SearchNames200ResponseAllOfDataInnerAllOf {
    return SearchNames200ResponseAllOfDataInnerAllOfFromJSONTyped(json, false);
}

export function SearchNames200ResponseAllOfDataInnerAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchNames200ResponseAllOfDataInnerAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function SearchNames200ResponseAllOfDataInnerAllOfToJSON(value?: SearchNames200ResponseAllOfDataInnerAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': value.status,
    };
}

