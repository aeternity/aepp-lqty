/* tslint:disable */
/* eslint-disable */
/**
 * Aeternity Middleware
 * API for [Aeternity Middleware](https://github.com/aeternity/ae_mdw)
 *
 * The version of the OpenAPI document: 1.51.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StatusMdwAsyncTasks } from './StatusMdwAsyncTasks';
import {
    StatusMdwAsyncTasksFromJSON,
    StatusMdwAsyncTasksFromJSONTyped,
    StatusMdwAsyncTasksToJSON,
} from './StatusMdwAsyncTasks';

/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * 
     * @type {StatusMdwAsyncTasks}
     * @memberof Status
     */
    mdwAsyncTasks: StatusMdwAsyncTasks;
    /**
     * The approximate number of generations synced per minute on middleware
     * @type {number}
     * @memberof Status
     */
    mdwGensPerMinute: number;
    /**
     * The top generation up to which the middleware was synced
     * @type {number}
     * @memberof Status
     */
    mdwHeight: number;
    /**
     * The last middleware migration ran
     * @type {number}
     * @memberof Status
     */
    mdwLastMigration: number;
    /**
     * The middleware's git revision of the latest commit applied
     * @type {string}
     * @memberof Status
     */
    mdwRevision: string;
    /**
     * true if middleware was synced up to the latest node block
     * @type {boolean}
     * @memberof Status
     */
    mdwSynced: boolean;
    /**
     * true if middleware is syncing (i.e. it didn't stop due to an error)
     * @type {boolean}
     * @memberof Status
     */
    mdwSyncing: boolean;
    /**
     * The middleware's version
     * @type {string}
     * @memberof Status
     */
    mdwVersion: string;
    /**
     * The node generation of the last block synced
     * @type {number}
     * @memberof Status
     */
    nodeHeight: number;
    /**
     * The percentage of generations synced on the node
     * @type {number}
     * @memberof Status
     */
    nodeProgress: number;
    /**
     * The node's git revision of the latest commit applied
     * @type {string}
     * @memberof Status
     */
    nodeRevision: string;
    /**
     * If true, the node is still processing additional blocks to reach the latest one
     * @type {boolean}
     * @memberof Status
     */
    nodeSyncing: boolean;
    /**
     * The node's version
     * @type {string}
     * @memberof Status
     */
    nodeVersion: string;
}

/**
 * Check if a given object implements the Status interface.
 */
export function instanceOfStatus(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "mdwAsyncTasks" in value;
    isInstance = isInstance && "mdwGensPerMinute" in value;
    isInstance = isInstance && "mdwHeight" in value;
    isInstance = isInstance && "mdwLastMigration" in value;
    isInstance = isInstance && "mdwRevision" in value;
    isInstance = isInstance && "mdwSynced" in value;
    isInstance = isInstance && "mdwSyncing" in value;
    isInstance = isInstance && "mdwVersion" in value;
    isInstance = isInstance && "nodeHeight" in value;
    isInstance = isInstance && "nodeProgress" in value;
    isInstance = isInstance && "nodeRevision" in value;
    isInstance = isInstance && "nodeSyncing" in value;
    isInstance = isInstance && "nodeVersion" in value;

    return isInstance;
}

export function StatusFromJSON(json: any): Status {
    return StatusFromJSONTyped(json, false);
}

export function StatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): Status {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mdwAsyncTasks': StatusMdwAsyncTasksFromJSON(json['mdw_async_tasks']),
        'mdwGensPerMinute': json['mdw_gens_per_minute'],
        'mdwHeight': json['mdw_height'],
        'mdwLastMigration': json['mdw_last_migration'],
        'mdwRevision': json['mdw_revision'],
        'mdwSynced': json['mdw_synced'],
        'mdwSyncing': json['mdw_syncing'],
        'mdwVersion': json['mdw_version'],
        'nodeHeight': json['node_height'],
        'nodeProgress': json['node_progress'],
        'nodeRevision': json['node_revision'],
        'nodeSyncing': json['node_syncing'],
        'nodeVersion': json['node_version'],
    };
}

export function StatusToJSON(value?: Status | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mdw_async_tasks': StatusMdwAsyncTasksToJSON(value.mdwAsyncTasks),
        'mdw_gens_per_minute': value.mdwGensPerMinute,
        'mdw_height': value.mdwHeight,
        'mdw_last_migration': value.mdwLastMigration,
        'mdw_revision': value.mdwRevision,
        'mdw_synced': value.mdwSynced,
        'mdw_syncing': value.mdwSyncing,
        'mdw_version': value.mdwVersion,
        'node_height': value.nodeHeight,
        'node_progress': value.nodeProgress,
        'node_revision': value.nodeRevision,
        'node_syncing': value.nodeSyncing,
        'node_version': value.nodeVersion,
    };
}

