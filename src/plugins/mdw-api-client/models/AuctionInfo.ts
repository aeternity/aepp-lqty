/* tslint:disable */
/* eslint-disable */
/**
 * Aeternity Middleware
 * API for [Aeternity Middleware](https://github.com/aeternity/ae_mdw)
 *
 * The version of the OpenAPI document: 1.51.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Auction } from './Auction';
import {
    AuctionFromJSON,
    AuctionFromJSONTyped,
    AuctionToJSON,
} from './Auction';
import type { AuctionInfoLastBid } from './AuctionInfoLastBid';
import {
    AuctionInfoLastBidFromJSON,
    AuctionInfoLastBidFromJSONTyped,
    AuctionInfoLastBidToJSON,
} from './AuctionInfoLastBid';

/**
 * 
 * @export
 * @interface AuctionInfo
 */
export interface AuctionInfo {
    /**
     * 
     * @type {number}
     * @memberof AuctionInfo
     */
    auctionEnd?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof AuctionInfo
     */
    bids?: Array<number>;
    /**
     * 
     * @type {AuctionInfoLastBid}
     * @memberof AuctionInfo
     */
    lastBid?: AuctionInfoLastBid;
    /**
     * 
     * @type {string}
     * @memberof AuctionInfo
     */
    name?: string;
    /**
     * 
     * @type {Auction}
     * @memberof AuctionInfo
     */
    previous?: Auction;
    /**
     * 
     * @type {string}
     * @memberof AuctionInfo
     */
    status?: AuctionInfoStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof AuctionInfo
     */
    txIndex?: number;
}


/**
 * @export
 */
export const AuctionInfoStatusEnum = {
    Auction: 'auction'
} as const;
export type AuctionInfoStatusEnum = typeof AuctionInfoStatusEnum[keyof typeof AuctionInfoStatusEnum];


/**
 * Check if a given object implements the AuctionInfo interface.
 */
export function instanceOfAuctionInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuctionInfoFromJSON(json: any): AuctionInfo {
    return AuctionInfoFromJSONTyped(json, false);
}

export function AuctionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuctionInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'auctionEnd': !exists(json, 'auction_end') ? undefined : json['auction_end'],
        'bids': !exists(json, 'bids') ? undefined : json['bids'],
        'lastBid': !exists(json, 'last_bid') ? undefined : AuctionInfoLastBidFromJSON(json['last_bid']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'previous': !exists(json, 'previous') ? undefined : AuctionFromJSON(json['previous']),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'txIndex': !exists(json, 'tx_index') ? undefined : json['tx_index'],
    };
}

export function AuctionInfoToJSON(value?: AuctionInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'auction_end': value.auctionEnd,
        'bids': value.bids,
        'last_bid': AuctionInfoLastBidToJSON(value.lastBid),
        'name': value.name,
        'previous': AuctionToJSON(value.previous),
        'status': value.status,
        'tx_index': value.txIndex,
    };
}

