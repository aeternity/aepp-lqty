/* tslint:disable */
/* eslint-disable */
/**
 * Aeternity Middleware
 * API for [Aeternity Middleware](https://github.com/aeternity/ae_mdw)
 *
 * The version of the OpenAPI document: 1.51.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Response Schema for AEX9 transfer responses
 * @export
 * @interface Aex9TransferResponse
 */
export interface Aex9TransferResponse {
    /**
     * Transfer amount of AEX9 token
     * @type {number}
     * @memberof Aex9TransferResponse
     */
    amount: number;
    /**
     * The block height
     * @type {number}
     * @memberof Aex9TransferResponse
     */
    blockHeight: number;
    /**
     * AEX9 token transfer index
     * @type {number}
     * @memberof Aex9TransferResponse
     */
    callTxi: number;
    /**
     * Contract identifier
     * @type {string}
     * @memberof Aex9TransferResponse
     */
    contractId: string;
    /**
     * Log index
     * @type {number}
     * @memberof Aex9TransferResponse
     */
    logIdx: number;
    /**
     * The unix timestamp
     * @type {number}
     * @memberof Aex9TransferResponse
     */
    microTime: number;
    /**
     * Recipient of AEX9 transfer
     * @type {string}
     * @memberof Aex9TransferResponse
     */
    recipient: string;
    /**
     * Sender of AEX9 transfer
     * @type {string}
     * @memberof Aex9TransferResponse
     */
    sender: string;
}

/**
 * Check if a given object implements the Aex9TransferResponse interface.
 */
export function instanceOfAex9TransferResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "blockHeight" in value;
    isInstance = isInstance && "callTxi" in value;
    isInstance = isInstance && "contractId" in value;
    isInstance = isInstance && "logIdx" in value;
    isInstance = isInstance && "microTime" in value;
    isInstance = isInstance && "recipient" in value;
    isInstance = isInstance && "sender" in value;

    return isInstance;
}

export function Aex9TransferResponseFromJSON(json: any): Aex9TransferResponse {
    return Aex9TransferResponseFromJSONTyped(json, false);
}

export function Aex9TransferResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Aex9TransferResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': json['amount'],
        'blockHeight': json['block_height'],
        'callTxi': json['call_txi'],
        'contractId': json['contract_id'],
        'logIdx': json['log_idx'],
        'microTime': json['micro_time'],
        'recipient': json['recipient'],
        'sender': json['sender'],
    };
}

export function Aex9TransferResponseToJSON(value?: Aex9TransferResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'block_height': value.blockHeight,
        'call_txi': value.callTxi,
        'contract_id': value.contractId,
        'log_idx': value.logIdx,
        'micro_time': value.microTime,
        'recipient': value.recipient,
        'sender': value.sender,
    };
}

