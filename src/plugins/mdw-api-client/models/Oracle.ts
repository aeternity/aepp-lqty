/* tslint:disable */
/* eslint-disable */
/**
 * Aeternity Middleware
 * API for [Aeternity Middleware](https://github.com/aeternity/ae_mdw)
 *
 * The version of the OpenAPI document: 1.51.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OracleExtendsInner } from './OracleExtendsInner';
import {
    OracleExtendsInnerFromJSON,
    OracleExtendsInnerFromJSONTyped,
    OracleExtendsInnerToJSON,
} from './OracleExtendsInner';

/**
 * 
 * @export
 * @interface Oracle
 */
export interface Oracle {
    /**
     * The oracle active status
     * @type {boolean}
     * @memberof Oracle
     */
    active: boolean;
    /**
     * The block height when the oracle became active
     * @type {number}
     * @memberof Oracle
     */
    activeFrom: number;
    /**
     * The block height when the oracle expires
     * @type {number}
     * @memberof Oracle
     */
    expireHeight: number;
    /**
     * The tx indexes when the oracle has been extended
     * @type {Array<OracleExtendsInner>}
     * @memberof Oracle
     */
    _extends: Array<OracleExtendsInner>;
    /**
     * The oracle id
     * @type {string}
     * @memberof Oracle
     */
    oracle: string;
    /**
     * The query fee
     * @type {number}
     * @memberof Oracle
     */
    queryFee: number;
    /**
     * The tx index when the oracle is registered
     * @type {number}
     * @memberof Oracle
     */
    register: number;
}

/**
 * Check if a given object implements the Oracle interface.
 */
export function instanceOfOracle(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "active" in value;
    isInstance = isInstance && "activeFrom" in value;
    isInstance = isInstance && "expireHeight" in value;
    isInstance = isInstance && "_extends" in value;
    isInstance = isInstance && "oracle" in value;
    isInstance = isInstance && "queryFee" in value;
    isInstance = isInstance && "register" in value;

    return isInstance;
}

export function OracleFromJSON(json: any): Oracle {
    return OracleFromJSONTyped(json, false);
}

export function OracleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Oracle {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': json['active'],
        'activeFrom': json['active_from'],
        'expireHeight': json['expire_height'],
        '_extends': ((json['extends'] as Array<any>).map(OracleExtendsInnerFromJSON)),
        'oracle': json['oracle'],
        'queryFee': json['query_fee'],
        'register': json['register'],
    };
}

export function OracleToJSON(value?: Oracle | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'active_from': value.activeFrom,
        'expire_height': value.expireHeight,
        'extends': ((value._extends as Array<any>).map(OracleExtendsInnerToJSON)),
        'oracle': value.oracle,
        'query_fee': value.queryFee,
        'register': value.register,
    };
}

