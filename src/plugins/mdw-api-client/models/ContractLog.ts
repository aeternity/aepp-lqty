/* tslint:disable */
/* eslint-disable */
/**
 * Aeternity Middleware
 * API for [Aeternity Middleware](https://github.com/aeternity/ae_mdw)
 *
 * The version of the OpenAPI document: 1.51.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * ContractLog
 * @export
 * @interface ContractLog
 */
export interface ContractLog {
    /**
     * 
     * @type {Array<number>}
     * @memberof ContractLog
     */
    args?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ContractLog
     */
    blockHash?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractLog
     */
    callTxHash?: string;
    /**
     * 
     * @type {number}
     * @memberof ContractLog
     */
    callTxi?: number;
    /**
     * 
     * @type {string}
     * @memberof ContractLog
     */
    contractId?: string;
    /**
     * 
     * @type {number}
     * @memberof ContractLog
     */
    contractTxi?: number;
    /**
     * 
     * @type {string}
     * @memberof ContractLog
     */
    data?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractLog
     */
    eventHash?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractLog
     */
    extCallerContractId?: string;
    /**
     * 
     * @type {number}
     * @memberof ContractLog
     */
    extCallerContractTxi?: number;
    /**
     * 
     * @type {number}
     * @memberof ContractLog
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof ContractLog
     */
    logIdx?: number;
    /**
     * 
     * @type {number}
     * @memberof ContractLog
     */
    microIndex?: number;
    /**
     * 
     * @type {number}
     * @memberof ContractLog
     */
    parentContractId?: number | null;
}

/**
 * Check if a given object implements the ContractLog interface.
 */
export function instanceOfContractLog(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ContractLogFromJSON(json: any): ContractLog {
    return ContractLogFromJSONTyped(json, false);
}

export function ContractLogFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContractLog {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'args': !exists(json, 'args') ? undefined : json['args'],
        'blockHash': !exists(json, 'block_hash') ? undefined : json['block_hash'],
        'callTxHash': !exists(json, 'call_tx_hash') ? undefined : json['call_tx_hash'],
        'callTxi': !exists(json, 'call_txi') ? undefined : json['call_txi'],
        'contractId': !exists(json, 'contract_id') ? undefined : json['contract_id'],
        'contractTxi': !exists(json, 'contract_txi') ? undefined : json['contract_txi'],
        'data': !exists(json, 'data') ? undefined : json['data'],
        'eventHash': !exists(json, 'event_hash') ? undefined : json['event_hash'],
        'extCallerContractId': !exists(json, 'ext_caller_contract_id') ? undefined : json['ext_caller_contract_id'],
        'extCallerContractTxi': !exists(json, 'ext_caller_contract_txi') ? undefined : json['ext_caller_contract_txi'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'logIdx': !exists(json, 'log_idx') ? undefined : json['log_idx'],
        'microIndex': !exists(json, 'micro_index') ? undefined : json['micro_index'],
        'parentContractId': !exists(json, 'parent_contract_id') ? undefined : json['parent_contract_id'],
    };
}

export function ContractLogToJSON(value?: ContractLog | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'args': value.args,
        'block_hash': value.blockHash,
        'call_tx_hash': value.callTxHash,
        'call_txi': value.callTxi,
        'contract_id': value.contractId,
        'contract_txi': value.contractTxi,
        'data': value.data,
        'event_hash': value.eventHash,
        'ext_caller_contract_id': value.extCallerContractId,
        'ext_caller_contract_txi': value.extCallerContractTxi,
        'height': value.height,
        'log_idx': value.logIdx,
        'micro_index': value.microIndex,
        'parent_contract_id': value.parentContractId,
    };
}

