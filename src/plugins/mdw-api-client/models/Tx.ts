/* tslint:disable */
/* eslint-disable */
/**
 * Aeternity Middleware
 * API for [Aeternity Middleware](https://github.com/aeternity/ae_mdw)
 *
 * The version of the OpenAPI document: 1.51.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Transaction
 * @export
 * @interface Tx
 */
export interface Tx {
    /**
     * The block hash
     * @type {string}
     * @memberof Tx
     */
    blockHash?: string;
    /**
     * The block height
     * @type {number}
     * @memberof Tx
     */
    blockHeight?: number;
    /**
     * The transaction hash
     * @type {string}
     * @memberof Tx
     */
    hash?: string;
    /**
     * The micro block index
     * @type {number}
     * @memberof Tx
     */
    microIndex?: number;
    /**
     * The unix timestamp
     * @type {number}
     * @memberof Tx
     */
    microTime?: number;
    /**
     * The signatures
     * @type {Array<string>}
     * @memberof Tx
     */
    signatures?: Array<string>;
    /**
     * The transaction
     * @type {object}
     * @memberof Tx
     */
    tx?: object;
    /**
     * The transaction index
     * @type {number}
     * @memberof Tx
     */
    txIndex?: number;
}

/**
 * Check if a given object implements the Tx interface.
 */
export function instanceOfTx(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TxFromJSON(json: any): Tx {
    return TxFromJSONTyped(json, false);
}

export function TxFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tx {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockHash': !exists(json, 'block_hash') ? undefined : json['block_hash'],
        'blockHeight': !exists(json, 'block_height') ? undefined : json['block_height'],
        'hash': !exists(json, 'hash') ? undefined : json['hash'],
        'microIndex': !exists(json, 'micro_index') ? undefined : json['micro_index'],
        'microTime': !exists(json, 'micro_time') ? undefined : json['micro_time'],
        'signatures': !exists(json, 'signatures') ? undefined : json['signatures'],
        'tx': !exists(json, 'tx') ? undefined : json['tx'],
        'txIndex': !exists(json, 'tx_index') ? undefined : json['tx_index'],
    };
}

export function TxToJSON(value?: Tx | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'block_hash': value.blockHash,
        'block_height': value.blockHeight,
        'hash': value.hash,
        'micro_index': value.microIndex,
        'micro_time': value.microTime,
        'signatures': value.signatures,
        'tx': value.tx,
        'tx_index': value.txIndex,
    };
}

