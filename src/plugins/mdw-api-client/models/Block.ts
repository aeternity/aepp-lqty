/* tslint:disable */
/* eslint-disable */
/**
 * Aeternity Middleware
 * API for [Aeternity Middleware](https://github.com/aeternity/ae_mdw)
 *
 * The version of the OpenAPI document: 1.51.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Block
 */
export interface Block {
    /**
     * The beneficiary
     * @type {string}
     * @memberof Block
     */
    beneficiary?: string;
    /**
     * The block hash
     * @type {string}
     * @memberof Block
     */
    hash?: string;
    /**
     * The block height
     * @type {number}
     * @memberof Block
     */
    height?: number;
    /**
     * The info
     * @type {string}
     * @memberof Block
     */
    info?: string;
    /**
     * The miner public key
     * @type {string}
     * @memberof Block
     */
    miner?: string;
    /**
     * The nonce
     * @type {string}
     * @memberof Block
     */
    nonce?: string;
    /**
     * The pow
     * @type {Array<number>}
     * @memberof Block
     */
    pow?: Array<number>;
    /**
     * The previous block hash
     * @type {string}
     * @memberof Block
     */
    prevHash?: string;
    /**
     * The previous key block hash
     * @type {string}
     * @memberof Block
     */
    prevKeyHash?: string;
    /**
     * The state hash
     * @type {string}
     * @memberof Block
     */
    stateHash?: string;
    /**
     * The target
     * @type {number}
     * @memberof Block
     */
    target?: number;
    /**
     * The time
     * @type {number}
     * @memberof Block
     */
    time?: number;
    /**
     * The version
     * @type {number}
     * @memberof Block
     */
    version?: number;
}

/**
 * Check if a given object implements the Block interface.
 */
export function instanceOfBlock(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockFromJSON(json: any): Block {
    return BlockFromJSONTyped(json, false);
}

export function BlockFromJSONTyped(json: any, ignoreDiscriminator: boolean): Block {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'beneficiary': !exists(json, 'beneficiary') ? undefined : json['beneficiary'],
        'hash': !exists(json, 'hash') ? undefined : json['hash'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'info': !exists(json, 'info') ? undefined : json['info'],
        'miner': !exists(json, 'miner') ? undefined : json['miner'],
        'nonce': !exists(json, 'nonce') ? undefined : json['nonce'],
        'pow': !exists(json, 'pow') ? undefined : json['pow'],
        'prevHash': !exists(json, 'prev_hash') ? undefined : json['prev_hash'],
        'prevKeyHash': !exists(json, 'prev_key_hash') ? undefined : json['prev_key_hash'],
        'stateHash': !exists(json, 'state_hash') ? undefined : json['state_hash'],
        'target': !exists(json, 'target') ? undefined : json['target'],
        'time': !exists(json, 'time') ? undefined : json['time'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function BlockToJSON(value?: Block | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'beneficiary': value.beneficiary,
        'hash': value.hash,
        'height': value.height,
        'info': value.info,
        'miner': value.miner,
        'nonce': value.nonce,
        'pow': value.pow,
        'prev_hash': value.prevHash,
        'prev_key_hash': value.prevKeyHash,
        'state_hash': value.stateHash,
        'target': value.target,
        'time': value.time,
        'version': value.version,
    };
}

